/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import ModelUML.DBUser;
import java.awt.Color;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 * Esta clase se encarga de las operaciones CRUD de los User
 *
 * @author Sebastián Zawisza
 * @author Jon Maneiro
 * @version %I% %G%
 * @since 1.0
 */
public class UserCRUD extends javax.swing.JDialog {

    /**
     * A return status code - returned if Cancel button has been pressed
     */
    public static final int RET_CANCEL = 0;
    /**
     * A return status code - returned if OK button has been pressed
     */
    public static final int RET_OK = 1;
    /**
     * El modo de la ventana, que determina qué función del CRUD se supone que
     * realice.
     */
    private static byte mode;

    private static ArrayList<DBUser> users;
    private static boolean[] errors = {false, false, false};

    /**
     * Creates new form UserCRUD
     *
     * @param parent Generado automáticamente
     * @param modal Generado automáticamente
     * @param mode Generado automáticamente
     */
    public UserCRUD(java.awt.Frame parent, boolean modal, byte mode) {
        super(parent, modal);
        initComponents();
        //<editor-fold defaultstate="collapsed" desc=" System look and feel setting code ">
        try {
            /* Set the System look and feel */
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(RET_CANCEL);
            }
        });
        this.mode = mode;
        mode();

    }

    /**
     * The return status of this dialog - one of RET_OK or RET_CANCEL
     *
     * @return the return status of this dialog - one of RET_OK or RET_CANCEL
     */
    public int getReturnStatus() {
        return returnStatus;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        jPasswordField2 = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        cancelButton = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jComboBox1 = new javax.swing.JComboBox<>();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jPasswordField1.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jPasswordField1CaretUpdate(evt);
            }
        });

        jPasswordField2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jPasswordField2CaretUpdate(evt);
            }
        });

        jLabel3.setText("Nombre de Usuario");

        jLabel4.setText("Contraseña");

        okButton.setText("Aceptar");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Contraseña otra vez");

        cancelButton.setText("Cancelar");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jTextField2.setEnabled(false);
        jTextField2.setMaximumSize(new java.awt.Dimension(6, 20));
        jTextField2.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                jTextField2CaretUpdate(evt);
            }
        });

        jComboBox1.setMaximumRowCount(50);
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPasswordField2)
                            .addComponent(jPasswordField1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addComponent(jLabel4))
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     *
     * @param evt Generado automáticamente
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog
    /**
     * Ejecuta la operacion CRUD que este seleccionada
     *
     * @param evt Generado automáticamente
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        boolean good = true;
        for (boolean b : errors) {
            if (b) {
                good = false;
            }
        }
        if (good) {
            if (String.valueOf(jPasswordField1.getPassword()).equals(String.valueOf(jPasswordField2.getPassword()))) {
                switch (mode) { //cdru
                    case 0:
                        try {

                            ViewController.insertUser(jTextField2.getText(), jPasswordField1.getPassword());
                            JOptionPane.showMessageDialog(this, "Usuario insertado.");
                            mode();
                            clean();

                        } catch (SQLException ex) {
                            Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error no controlado:\n" + ex.toString());
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    case 1:
                        try {

                            jComboBox1.setSelectedIndex(-1);
                            ViewController.deleteUser(jTextField2.getText());
                            JOptionPane.showMessageDialog(this, "Usuario '" + jComboBox1.getSelectedItem() + "' eliminado.");
                            mode();
                            clean();

                        } catch (SQLException ex) {
                            Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error no controlado:\n" + ex.toString());
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                    case 2:
                        dispose();
                        break;
                    case 3:
                        try {
                            if (jPasswordField1.getPassword().length != 0) {
                                ViewController.updateDBUser(jTextField2.getText(), (String) jComboBox1.getSelectedItem(), jPasswordField1.getPassword());
                            } else {
                                ViewController.updateDBUser(jTextField2.getText(), (String) jComboBox1.getSelectedItem());
                            }

                            JOptionPane.showMessageDialog(this, "Usuario '" + jComboBox1.getSelectedItem() + "' actualizado.");
                            jComboBox1.setSelectedIndex(-1);
                            clean();

                        } catch (SQLException ex) {
                            Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
                            JOptionPane.showMessageDialog(this, "Error no controlado:\n" + ex.toString());
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        break;
                }

            } else {
                JOptionPane.showMessageDialog(this, "Las contraseñas no coinciden.");
                jPasswordField1.setText("");
                jPasswordField2.setText("");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Uno de los campos es demasiado largo.");
        }
    }//GEN-LAST:event_okButtonActionPerformed
    /**
     * Cierra la ventana
     *
     * @param evt Generado automáticamente
     */
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed
    /**
     * Rellena los campos con los datos del User seleccionado
     *
     * @param evt Generado automáticamente
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        users.stream().filter(p -> p.getUserName().equals((String) jComboBox1.getSelectedItem())).findFirst().ifPresent(c -> { //juro por todos los santos que esto no lo busqué en google
            jTextField2.setText(c.getUserName());
        });
    }//GEN-LAST:event_jComboBox1ActionPerformed
    /**
     * Verifica la validez del campo.
     *
     * @param evt
     */
    private void jTextField2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jTextField2CaretUpdate
        if (jTextField2.getText().length() > 12) {
            jTextField2.setBackground(Color.RED);
            errors[0] = true;
        } else {
            jTextField2.setBackground(Color.WHITE);
            errors[0] = false;
        }
    }//GEN-LAST:event_jTextField2CaretUpdate
    /**
     * Verifica la validez del campo.
     *
     * @param evt
     */
    private void jPasswordField1CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jPasswordField1CaretUpdate
        if (jPasswordField1.getPassword().length > 12) {
            jPasswordField1.setBackground(Color.RED);
            errors[1] = true;
        } else {
            jPasswordField1.setBackground(Color.WHITE);
            errors[1] = false;
        }
    }//GEN-LAST:event_jPasswordField1CaretUpdate
    /**
     * Verifica la validez del campo.
     *
     * @param evt
     */
    private void jPasswordField2CaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_jPasswordField2CaretUpdate
        if (jPasswordField2.getPassword().length > 12) {
            jPasswordField2.setBackground(Color.RED);
            errors[2] = true;
        } else {
            jPasswordField2.setBackground(Color.WHITE);
            errors[2] = false; 
        }
    }//GEN-LAST:event_jPasswordField2CaretUpdate
    /**
     * Cierra la ventana
     *
     * @param retStatus Generado automáticamente
     */
    private void doClose(int retStatus) {
        returnStatus = retStatus;
        dispose();
    }

    /**
     * Habilita y deshabilita el estado inicial de componentes de la interfaz
     * dependiendo del modo de la ventana.
     */
    private void mode() {
        if (mode == 0) {
            jComboBox1.setVisible(false);
            jTextField2.setEnabled(true);
            pack();
        } else {
            try {
                jComboBox1.removeAllItems();
                users = ViewController.selectDBUsers();
                users.forEach(e -> jComboBox1.addItem(e.getUserName()));
            } catch (SQLException ex) {
                Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(UserCRUD.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (mode != 3) {
                jPasswordField1.setVisible(false);
                jPasswordField2.setVisible(false);
                jLabel5.setVisible(false);
                jLabel4.setVisible(false);
                pack();
            } else {
                jTextField2.setEnabled(true);
            }
            jComboBox1.setSelectedIndex(-1);
            clean();
        }

    }

    /**
     * Vacia los campos
     */
    private void clean() {
        jTextField2.setText("");
        jPasswordField1.setText("");
        jPasswordField2.setText("");
    }

    /**
     * El main de la clase
     *
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            UserCRUD dialog = new UserCRUD(new javax.swing.JFrame(), true, mode);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

    private int returnStatus = RET_CANCEL;
}
