/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import ModelUML.Game;
import ModelUML.MatchSet;
import Parser.SAXParserClassification;
import Parser.TeamSax;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;

/**
 * @author Sebasti치n Zawisza
 * @author Sergio Zulueta
 * @author Jon Maneiro
 * @version %I% %G%
 * @since 1.0
 */
public class User extends javax.swing.JFrame {

    ArrayList<MatchSet> league; // El array de la liga que actualmente se esta jugando
    private static boolean child;
    ArrayList<Integer> templeague = new ArrayList();//el array para usar con los id de los matchsets de la liga seleccionada
    
    /**
     * Creates new form User
     */
    public User(boolean child) {
        initComponents();
        //<editor-fold defaultstate="collapsed" desc=" System look and feel setting code ">
        try {
            /* Set the System look and feel */
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        if (child) {
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        }
        league = ViewController.executeSaxParserLeague();
        cbLeague.addItem("Liga actual");
        fillCbLeague();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbLeague = new javax.swing.JComboBox<>();
        cbMatchset = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtGames = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jlClassification = new javax.swing.JList<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel1.setText("Liga");

        jLabel2.setText("Jornada");

        cbLeague.setToolTipText("");
        cbLeague.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbLeagueActionPerformed(evt);
            }
        });

        cbMatchset.setMaximumRowCount(40);
        cbMatchset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbMatchsetActionPerformed(evt);
            }
        });

        jtGames.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Local", "Puntuaci칩n", "Visitante", "Puntuaci칩n", "Ganador"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtGames);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Clasificaci칩n");

        jlClassification.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jlClassification.setEnabled(false);
        jScrollPane2.setViewportView(jlClassification);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(24, 24, 24)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbMatchset, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbLeague, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(cbLeague, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cbMatchset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbLeagueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbLeagueActionPerformed
        cbMatchset.removeAllItems();
        String selectedleague = cbLeague.getSelectedItem().toString();
        
        fillCbMatchSet(selectedleague);
        fillJlClassification();

    }//GEN-LAST:event_cbLeagueActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated

    }//GEN-LAST:event_formWindowActivated

    private void cbMatchsetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbMatchsetActionPerformed
        try {
            
            int leaguenum = ViewController.getLeagueNum(cbLeague.getSelectedItem().toString());
            ArrayList<Game> selectedMSGames = ViewController.getMatchSetGames(leaguenum, Integer.parseInt(cbMatchset.getSelectedItem().toString()));
            DefaultTableModel model = (DefaultTableModel) jtGames.getModel();
            model.setRowCount(0);
            for (int x = 0; x < selectedMSGames.size(); x++) {
                String winner = "";
                if (selectedMSGames.get(x).getScore1() > selectedMSGames.get(x).getScore2()) {
                    winner = "" + selectedMSGames.get(x).getTeam1().getTeamName();
                } else if (selectedMSGames.get(x).getScore1() < selectedMSGames.get(x).getScore2()) {
                    winner = "" + selectedMSGames.get(x).getTeam2().getTeamName();
                } else {
                    winner = "Empate";
                }
                if(cbMatchset.getSelectedIndex()<=cbMatchset.getItemCount()/2){
                    Object[] row = {selectedMSGames.get(x).getTeam1().getTeamName(), selectedMSGames.get(x).getScore1(), selectedMSGames.get(x).getTeam2().getTeamName(), selectedMSGames.get(x).getScore2(), winner};    
                    model.addRow(row);
                }else{
                    Object[] row = {selectedMSGames.get(x).getTeam2().getTeamName(), selectedMSGames.get(x).getScore2(), selectedMSGames.get(x).getTeam1().getTeamName(), selectedMSGames.get(x).getScore1(), winner};
                    model.addRow(row);
                }
                

                
            }
            jtGames.setModel(model);

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbMatchsetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new User(child).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cbLeague;
    private javax.swing.JComboBox<String> cbMatchset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList<String> jlClassification;
    private javax.swing.JTable jtGames;
    // End of variables declaration//GEN-END:variables
    /**
     * Rellena el ComboBox que contiene las ligas
     */
    private void fillCbLeague() {
        try {

            ArrayList<String> leaguenames = ViewController.getLeagueNames();
            leaguenames.remove(leaguenames.size() - 1);
            leaguenames.forEach(e -> cbLeague.addItem(e));

        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Rellena el ComboBox que contiene las jornadas con las de la liga actual
     */
    private void fillCbMatchSet() {
        try {
            ArrayList<String> temparr = ViewController.getLeagueNames();
            int templeagnumb = ViewController.getLeagueNum(temparr.get(temparr.size()-1));
            ArrayList<Integer> tempmatch = ViewController.getLeagueMatchSetsID(templeagnumb);
            
            for (int x = 0; x < tempmatch.size(); x++) {
                cbMatchset.addItem(tempmatch.get(x).toString());
            }
        } catch (SQLException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    private void fillCbMatchSet(String leaguename) {
        if (leaguename.equalsIgnoreCase("Liga actual")) {
            fillCbMatchSet();
        } else {
            try {

                int leaguenum = ViewController.getLeagueNum(leaguename);
                templeague.addAll(ViewController.getLeagueMatchSetsID(leaguenum));
                templeague.forEach(e -> cbMatchset.addItem("" + e));
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(User.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void fillJlClassification() {
        ArrayList<TeamSax> Classification = SAXParserClassification.executeSAXClassification();
        String[] raw = new String[(Classification.size())];
        for (int x = 0; x < Classification.size(); x++) {
            raw[x] = Classification.get(x).getName() + "  " + Classification.get(x).getPoints();

        }
        jlClassification.setListData(raw);
    }
}
